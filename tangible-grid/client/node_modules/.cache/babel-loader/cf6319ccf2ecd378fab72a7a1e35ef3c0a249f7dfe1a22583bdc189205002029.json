{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m17wo\\\\Documents\\\\Research\\\\TangibleSite\\\\tangible-grid\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Textbox from './Textbox.tsx';\nimport Toolbar from './Toolbar.tsx'; // Assuming you have a Toolbar component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Your type definitions\n\nconst App = () => {\n  _s();\n  const [arduinoDataArray, setArduinoDataArray] = useState([]);\n  const [activeTextboxId, setActiveTextboxId] = useState(null);\n  const [containerDimensions, setContainerDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const containerRef = useRef(null); // Add this line\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const {\n        width\n      } = containerRef.current.getBoundingClientRect();\n      const height = 4 / 3 * width; // Calculate height as 4/3 times the width\n      setContainerDimensions({\n        width,\n        height\n      });\n    }\n  }, []); // This effect hook runs once after the component mounts\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/data`);\n        const {\n          data\n        } = await response.json();\n        if (data && data.length > 0) {\n          const newData = data.map(d => JSON.parse(d)).map(parsed => ({\n            ...parsed,\n            x: Number(parsed.x),\n            y: Number(parsed.y),\n            h: Number(parsed.h),\n            w: Number(parsed.w)\n          }));\n          setArduinoDataArray(prevData => {\n            // Logic to add or remove textboxes based on type\n            return newData.reduce((acc, currData) => {\n              if (currData.type === \"add\") {\n                acc.push(currData); // Add new textbox data\n              } else if (currData.type === \"delete\") {\n                return acc.filter(item => item.ID !== currData.ID); // Remove textbox data\n              }\n              return acc;\n            }, [...prevData]);\n          });\n        }\n      } catch (error) {\n        console.error(\"Fetching data failed\", error);\n      }\n    };\n    const intervalId = setInterval(fetchData, 2000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      ref: containerRef,\n      children: [\" \", arduinoDataArray.map(data => /*#__PURE__*/_jsxDEV(Textbox, {\n        data: data,\n        isActive: data.ID === activeTextboxId,\n        setActiveTextboxId: setActiveTextboxId,\n        containerDimensions: containerDimensions // Pass container dimensions as props\n      }, data.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"D9de4WEB5He3+Inb34fEtYFyLYQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Textbox","Toolbar","jsxDEV","_jsxDEV","App","_s","arduinoDataArray","setArduinoDataArray","activeTextboxId","setActiveTextboxId","containerDimensions","setContainerDimensions","width","height","containerRef","current","getBoundingClientRect","fetchData","response","fetch","data","json","length","newData","map","d","JSON","parse","parsed","x","Number","y","h","w","prevData","reduce","acc","currData","type","push","filter","item","ID","error","console","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","isActive","_c","$RefreshReg$"],"sources":["C:/Users/m17wo/Documents/Research/TangibleSite/tangible-grid/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Textbox from './Textbox.tsx';\nimport Toolbar from './Toolbar.tsx'; // Assuming you have a Toolbar component\nimport { ArduinoData } from './types'; // Your type definitions\n\nconst App = () => {\n    const [arduinoDataArray, setArduinoDataArray] = useState<ArduinoData[]>([]);\n    const [activeTextboxId, setActiveTextboxId] = useState<string | null>(null);\n\n    const [containerDimensions, setContainerDimensions] = useState({ width: 0, height: 0 });\n    const containerRef = useRef<HTMLDivElement>(null); // Add this line\n\n    useEffect(() => {\n        if (containerRef.current) {\n            const { width } = containerRef.current.getBoundingClientRect();\n            const height = (4 / 3) * width; // Calculate height as 4/3 times the width\n            setContainerDimensions({ width, height });\n        }\n    }, []); // This effect hook runs once after the component mounts\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(`http://localhost:3001/api/data`);\n                const { data } = await response.json();\n                if (data && data.length > 0) {\n                    const newData = data.map((d) => JSON.parse(d)).map(parsed => ({\n                        ...parsed,\n                        x: Number(parsed.x),\n                        y: Number(parsed.y),\n                        h: Number(parsed.h),\n                        w: Number(parsed.w),\n                    }));\n                    setArduinoDataArray(prevData => {\n                        // Logic to add or remove textboxes based on type\n                        return newData.reduce((acc, currData) => {\n                            if (currData.type === \"add\") {\n                                acc.push(currData); // Add new textbox data\n                            } else if (currData.type === \"delete\") {\n                                return acc.filter(item => item.ID !== currData.ID); // Remove textbox data\n                            }\n                            return acc;\n                        }, [...prevData]);\n                    });\n                }\n            } catch (error) {\n                console.error(\"Fetching data failed\", error);\n            }\n        };\n\n        const intervalId = setInterval(fetchData, 2000);\n        return () => clearInterval(intervalId);\n    }, []);\n\n\n    return (\n        <div className=\"App\">\n            <Toolbar /> {/* This is your global toolbar */}\n            <div id=\"container\" ref={containerRef}> {/* Add the ref here */}\n                {arduinoDataArray.map((data) => (\n                    <Textbox\n                        key={data.ID}\n                        data={data}\n                        isActive={data.ID === activeTextboxId}\n                        setActiveTextboxId={setActiveTextboxId}\n                        containerDimensions={containerDimensions} // Pass container dimensions as props\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}