{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m17wo\\\\Documents\\\\Research\\\\TangibleSite\\\\tangible-grid\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [arduinoData, setArduinoData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/data');\n        const {\n          data\n        } = await response.json();\n        setArduinoData(data);\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: textboxes.map(({\n        id,\n        x,\n        y,\n        h,\n        w,\n        content\n      }) => /*#__PURE__*/_jsxDEV(Textbox, {\n        id: id,\n        x: x,\n        y: y,\n        h: h,\n        w: w,\n        content: content\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IIBf0z3gelWZfgwyp4P+PUEPK1A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","arduinoData","setArduinoData","fetchData","response","fetch","data","json","error","console","intervalId","setInterval","clearInterval","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","textboxes","map","x","y","h","w","content","Textbox","_c","$RefreshReg$"],"sources":["C:/Users/m17wo/Documents/Research/TangibleSite/tangible-grid/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [arduinoData, setArduinoData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/data');\n        const { data } = await response.json();\n        setArduinoData(data);\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div id=\"toolbar\">\n        {/* Toolbar components here */}\n      </div>\n      <div id=\"container\">\n        {textboxes.map(({ id, x, y, h, w, content }) => (\n          <Textbox key={id} id={id} x={x} y={y} h={h} w={w} content={content} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACtCL,cAAc,CAACI,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAME,UAAU,GAAGC,WAAW,CAACR,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEjD,OAAO,MAAMS,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAKiB,EAAE,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CAAC,eACNrB,OAAA;MAAKiB,EAAE,EAAC,WAAW;MAAAD,QAAA,EAChBM,SAAS,CAACC,GAAG,CAAC,CAAC;QAAEN,EAAE;QAAEO,CAAC;QAAEC,CAAC;QAAEC,CAAC;QAAEC,CAAC;QAAEC;MAAQ,CAAC,kBACzC5B,OAAA,CAAC6B,OAAO;QAAUZ,EAAE,EAAEA,EAAG;QAACO,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,OAAO,EAAEA;MAAQ,GAArDX,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqD,CACtE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnB,EAAA,CA/BQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}