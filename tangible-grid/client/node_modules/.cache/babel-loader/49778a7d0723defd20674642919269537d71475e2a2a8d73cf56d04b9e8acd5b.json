{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m17wo\\\\Documents\\\\Research\\\\TangibleSite\\\\tangible-grid\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Textbox from \"./Textbox.tsx\"; // Import the Textbox component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [arduinoDataArray, setArduinoDataArray] = useState([]);\n  const [activeTextboxId, setActiveTextboxId] = useState(null);\n  const [lastId, setLastId] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/data?lastId=${lastId}`);\n        const {\n          data,\n          lastId: newLastId\n        } = await response.json(); // Destructure newLastId from response\n        console.log(data);\n        if (data && data.length > 0) {\n          // Check if there are new messages\n          // Assuming data is an array of JSON strings received from your backend\n          const newData = data.map(d => {\n            const parsed = JSON.parse(d); // Parse each JSON string to an object\n            return {\n              ...parsed,\n              x: Number(parsed.x),\n              y: Number(parsed.y),\n              h: Number(parsed.h),\n              w: Number(parsed.w)\n            };\n          });\n          setArduinoDataArray(prevData => [...prevData, ...newData]);\n          setLastId(newLastId); // Update lastId with the new lastId from the server\n        }\n      } catch (error) {\n        console.error(\"Fetching data failed\", error);\n      }\n    };\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up on unmount\n  }, [lastId]); // Add lastId as a dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: arduinoDataArray.map((data, index) =>\n      /*#__PURE__*/\n      // Assume each ArduinoData item has a unique ID\n      _jsxDEV(Textbox, {\n        data: data,\n        isActive: activeTextboxId === data.ID,\n        setActiveTextboxId: setActiveTextboxId\n      }, data.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jwPZ+hVRhqKqs/YsmMHhS/H2LeE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Textbox","jsxDEV","_jsxDEV","App","_s","arduinoDataArray","setArduinoDataArray","activeTextboxId","setActiveTextboxId","lastId","setLastId","fetchData","response","fetch","data","newLastId","json","console","log","length","newData","map","d","parsed","JSON","parse","x","Number","y","h","w","prevData","error","intervalId","setInterval","clearInterval","className","children","id","index","isActive","ID","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/m17wo/Documents/Research/TangibleSite/tangible-grid/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Textbox from \"./Textbox.tsx\"; // Import the Textbox component\nimport { ArduinoData } from './types';\n\nfunction App() {\n    const [arduinoDataArray, setArduinoDataArray] = useState<ArduinoData[]>([]);\n    const [activeTextboxId, setActiveTextboxId] = useState<string | null>(null);\n    const [lastId, setLastId] = useState(0);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:3001/api/data?lastId=${lastId}`\n                );\n                const { data, lastId: newLastId } = await response.json(); // Destructure newLastId from response\n                console.log(data);\n\n                if (data && data.length > 0) {\n                    // Check if there are new messages\n                    // Assuming data is an array of JSON strings received from your backend\n                    const newData = data.map((d) => {\n                        const parsed = JSON.parse(d); // Parse each JSON string to an object\n                        return {\n                            ...parsed,\n                            x: Number(parsed.x),\n                            y: Number(parsed.y),\n                            h: Number(parsed.h),\n                            w: Number(parsed.w),\n                        };\n                    });\n\n                    setArduinoDataArray((prevData) => [...prevData, ...newData]);\n                    setLastId(newLastId); // Update lastId with the new lastId from the server\n                }\n            } catch (error) {\n                console.error(\"Fetching data failed\", error);\n            }\n        };\n\n        const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n        return () => clearInterval(intervalId); // Clean up on unmount\n    }, [lastId]); // Add lastId as a dependency\n\n    return (\n        <div className=\"App\">\n            <div id=\"container\">\n                {arduinoDataArray.map((data, index) => (\n                    // Assume each ArduinoData item has a unique ID\n                    <Textbox\n                        key={data.ID}\n                        data={data}\n                        isActive={activeTextboxId === data.ID}\n                        setActiveTextboxId={setActiveTextboxId}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}