{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m17wo\\\\Documents\\\\Research\\\\TangibleSite\\\\tangible-grid\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [arduinoDataArray, setArduinoDataArray] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/data');\n        const {\n          data\n        } = await response.json();\n        console.log(data);\n        if (data) {\n          setArduinoDataArray(prevData => [...prevData, JSON.parse(data)]);\n        }\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: arduinoDataArray.map((data, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data from Arduino: \", JSON.stringify(data)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+2tBB0tgEAUZ8yNIZRaB2KuL2ko=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","arduinoDataArray","setArduinoDataArray","fetchData","response","fetch","data","json","console","log","prevData","JSON","parse","error","intervalId","setInterval","clearInterval","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","map","index","stringify","_c","$RefreshReg$"],"sources":["C:/Users/m17wo/Documents/Research/TangibleSite/tangible-grid/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ninterface ArduinoData {\n  ID: string;\n  type: string;\n  bracket: string;\n  x: string;\n  y: string;\n  h: string;\n  w: string;\n  touch: string;\n}\n\nfunction App() {\n  const [arduinoDataArray, setArduinoDataArray] = useState<ArduinoData[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/data');\n        const { data } = await response.json();\n        console.log(data);\n        if (data) {\n          setArduinoDataArray(prevData => [...prevData, JSON.parse(data)]);\n        }\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div id=\"toolbar\">\n        {/* Toolbar components here */}\n      </div>\n      <div id=\"container\">\n        {arduinoDataArray.map((data, index) => (\n          <p key={index}>Data from Arduino: {JSON.stringify(data)}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAanB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAgB,EAAE,CAAC;EAE3EC,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACtCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjB,IAAIA,IAAI,EAAE;UACRJ,mBAAmB,CAACQ,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,CAAC,CAAC;QAClE;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMC,UAAU,GAAGC,WAAW,CAACZ,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEjD,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpB,OAAA;MAAKqB,EAAE,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CAAC,eACNzB,OAAA;MAAKqB,EAAE,EAAC,WAAW;MAAAD,QAAA,EAChBjB,gBAAgB,CAACuB,GAAG,CAAC,CAAClB,IAAI,EAAEmB,KAAK,kBAChC3B,OAAA;QAAAoB,QAAA,GAAe,qBAAmB,EAACP,IAAI,CAACe,SAAS,CAACpB,IAAI,CAAC;MAAA,GAA/CmB,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACvB,EAAA,CAlCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}