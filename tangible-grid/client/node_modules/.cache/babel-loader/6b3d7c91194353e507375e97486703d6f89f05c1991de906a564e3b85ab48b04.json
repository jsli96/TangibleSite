{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m17wo\\\\Documents\\\\Research\\\\TangibleSite\\\\tangible-grid\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [arduinoDataArray, setArduinoDataArray] = useState([]);\n  const [lastId, setLastId] = useState(0); // New state for tracking last message ID\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/data?lastId=${lastId}`);\n        const {\n          data,\n          lastId: newLastId\n        } = await response.json(); // Destructure newLastId from response\n        console.log(data);\n        if (data && data.length > 0) {\n          // Check if there are new messages\n          const newData = data.map(d => JSON.parse(d)); // Assuming data is an array of JSON strings\n          setArduinoDataArray(prevData => [...prevData, ...newData]);\n          setLastId(newLastId); // Update lastId with the new lastId from the server\n        }\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(intervalId); // Clean up on unmount\n  }, [lastId]); // Add lastId as a dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: arduinoDataArray.map((data, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data from Arduino: \", JSON.stringify(data)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y/LY9FW7LkDk0VcbkYt1akQNWMY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","arduinoDataArray","setArduinoDataArray","lastId","setLastId","fetchData","response","fetch","data","newLastId","json","console","log","length","newData","map","d","JSON","parse","prevData","error","intervalId","setInterval","clearInterval","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","index","stringify","_c","$RefreshReg$"],"sources":["C:/Users/m17wo/Documents/Research/TangibleSite/tangible-grid/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ninterface ArduinoData {\n  ID: string;\n  type: string;\n  bracket: string;\n  x: string;\n  y: string;\n  h: string;\n  w: string;\n  touch: string;\n}\n\nfunction App() {\n  const [arduinoDataArray, setArduinoDataArray] = useState<ArduinoData[]>([]);\n  const [lastId, setLastId] = useState(0); // New state for tracking last message ID\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/data?lastId=${lastId}`);\n        const { data, lastId: newLastId } = await response.json(); // Destructure newLastId from response\n        console.log(data);\n  \n        if (data && data.length > 0) { // Check if there are new messages\n          const newData = data.map(d => JSON.parse(d)); // Assuming data is an array of JSON strings\n          setArduinoDataArray(prevData => [...prevData, ...newData]);\n          setLastId(newLastId); // Update lastId with the new lastId from the server\n        }\n      } catch (error) {\n        console.error('Fetching data failed', error);\n      }\n    };\n  \n    const intervalId = setInterval(fetchData, 2000); // Poll every 2 seconds\n  \n    return () => clearInterval(intervalId); // Clean up on unmount\n  }, [lastId]); // Add lastId as a dependency\n\n  return (\n    <div className=\"App\">\n      <div id=\"toolbar\">\n        {/* Toolbar components here */}\n      </div>\n      <div id=\"container\">\n        {arduinoDataArray.map((data, index) => (\n          <p key={index}>Data from Arduino: {JSON.stringify(data)}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAanB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAgB,EAAE,CAAC;EAC3E,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yCAAwCJ,MAAO,EAAC,CAAC;QAC/E,MAAM;UAAEK,IAAI;UAAEL,MAAM,EAAEM;QAAU,CAAC,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3DC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;QAEjB,IAAIA,IAAI,IAAIA,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;UAAE;UAC7B,MAAMC,OAAO,GAAGN,IAAI,CAACO,GAAG,CAACC,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;UAC9Cd,mBAAmB,CAACiB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE,GAAGL,OAAO,CAAC,CAAC;UAC1DV,SAAS,CAACK,SAAS,CAAC,CAAC,CAAC;QACxB;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMC,UAAU,GAAGC,WAAW,CAACjB,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEjD,OAAO,MAAMkB,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACEL,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3B,OAAA;MAAK4B,EAAE,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CAAC,eACNhC,OAAA;MAAK4B,EAAE,EAAC,WAAW;MAAAD,QAAA,EAChBxB,gBAAgB,CAACc,GAAG,CAAC,CAACP,IAAI,EAAEuB,KAAK,kBAChCjC,OAAA;QAAA2B,QAAA,GAAe,qBAAmB,EAACR,IAAI,CAACe,SAAS,CAACxB,IAAI,CAAC;MAAA,GAA/CuB,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9B,EAAA,CAtCQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}